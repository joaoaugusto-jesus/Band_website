datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  role      String    @default("user") // Add a default value
  venues    Venue[]
  gigs      Gig[]
  bookings  Booking[]
  posts     Post[] // Add this field to define the opposite relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  totalPrice Float
  items      OrderItem[]
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  name     String? // Optional field
  type     String? // Optional field (e.g., "product", "service", etc.)
  price    Float
  orderId  Int
  order    Order   @relation(fields: [orderId], references: [id])
}

model Venue {
  id       Int    @id @default(autoincrement())
  name     String
  address  String
  capacity Int
  ownerId  String // Matches User.id type
  owner    User   @relation(fields: [ownerId], references: [id])
  gigs     Gig[]
}

model Gig {
  id       Int       @id @default(autoincrement())
  name     String
  date     DateTime
  artistId String // Matches User.id type
  artist   User      @relation(fields: [artistId], references: [id])
  venueId  Int
  venue    Venue     @relation(fields: [venueId], references: [id])
}

model Booking {
  id     Int    @id @default(autoincrement())
  userId String
  date      DateTime
  user   User   @relation(fields: [userId], references: [id])
  status String // e.g., "pending", "confirmed", "cancelled"
}
